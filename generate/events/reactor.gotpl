package disgord

// Code generated - This file has been automatically generated by generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt reactor.go and event/events.go and run `go generate`

import (
	"context"
	"errors"
)

//////////////////////////////////////////////////////
//
// Helper funcs
//
//////////////////////////////////////////////////////

func defineResource(evt string) (resource evtResource) {
    switch evt {
	{{range .}} {{if .IsDiscordEvent}}
	case Evt{{.}}:
        resource = &{{.}}{} {{end}} {{end}}
    }

    return resource
}

//////////////////////////////////////////////////////
//
// Dispatcher: contructor + repetitive methods
//
//////////////////////////////////////////////////////

// newDispatcher construct a Dispatch object for reacting to web socket events
// from discord
func newDispatcher(activateEventChannels bool, evtChanSize int) *dispatcher {
	d := &dispatcher{
		activateEventChannels: activateEventChannels,
		handlerSpecs: make(map[string][]*handlerSpec),
		shutdown: make(chan struct{}),
	}

	if activateEventChannels {
        d.dispatcherChans = &dispatcherChans{
            {{range .}} {{if .IsDiscordEvent}}
            {{.LowerCaseFirst}}Chan: make(chan *{{.}}, evtChanSize), {{end}} {{end}}
        }
    }

	return d
}

func (d *dispatcher) trigger(h Handler, evt resource) {
	switch t := h.(type) {
    case SimpleHandler:
        t(d.session)
    case SimplestHandler:
        t()
    {{- range .}} {{if .IsDiscordEvent}}
    case {{.}}Handler:
        t(d.session, evt.(*{{.}}))
    {{- end}}{{- end}}
    }
}

//////////////////////////////////////////////////////
//
// Dispatcher: Event Channels
//
//////////////////////////////////////////////////////

type dispatcherChans struct {
	session  Session
	{{range .}} {{if .IsDiscordEvent}}
	{{.LowerCaseFirst}}Chan chan *{{.}} {{end}} {{end}}
}

// EvtChan ... TODO
func (d *dispatcherChans) EvtChan(evt string) (channel interface{}, err error) {
	switch evt {
	{{range .}} {{if .IsDiscordEvent}}
	case Evt{{.}}:
			channel = d.{{.}}() {{end}} {{end}}
	default:
		err = errors.New("no event channel exists for given event: " + evt)
	}

	return
}

func (d *dispatcherChans) trigger(ctx context.Context, evtName string, evt resource) {
	switch evtName {
	{{range .}} {{if .IsDiscordEvent}}
	case Evt{{.}}:
		d.{{.LowerCaseFirst}}Chan <- evt.(*{{.}}) {{end}} {{end}}
	default:
		// if we land at this stage, the channel is either full or a unknown event has come through
		// empty the channel
		d.drainChannel(evtName)
	}
}

func (d *dispatcherChans) drainChannel(evtName string) {
    switch evtName {
        {{range .}} {{if .IsDiscordEvent}}
        case Evt{{.}}:
            for range d.{{.LowerCaseFirst}}Chan {} {{end}} {{end}}
    }
}

{{range .}} {{if .IsDiscordEvent}}
// {{.}} gives access to {{.LowerCaseFirst}}Chan for {{.}} events
func (d *dispatcherChans) {{.}}() <-chan *{{.}} {
	return d.{{.LowerCaseFirst}}Chan
} {{end}} {{end}}

//////////////////////////////////////////////////////
//
// Handler Signatures
//
//////////////////////////////////////////////////////

{{range .}}
// {{.}}Handler is triggered in {{.}} events
type {{.}}Handler = func(session Session, h *{{.}}){{end}}
